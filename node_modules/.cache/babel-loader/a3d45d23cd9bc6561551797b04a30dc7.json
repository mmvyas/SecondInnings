{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\src\\\\components\\\\Map\\\\charts\\\\HospitalChart.js\";\nimport React from 'react';\nimport Chart from 'react-google-charts';\nimport { Spinner } from 'react-bootstrap';\n\nvar HospitalChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HospitalChart, _React$Component);\n\n  function HospitalChart(props) {\n    var _this;\n\n    _classCallCheck(this, HospitalChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HospitalChart).call(this, props));\n    _this.state = {\n      currentLGA: _this.props.lga,\n      fetchData: null\n    };\n    var lgaid = _this.props.lga;\n    console.log(lgaid);\n    var jsonResponse;\n    var x = new XMLHttpRequest();\n    x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=hoslist');\n\n    x.onload = x.onerror = function () {\n      var data = x.responseText;\n      jsonResponse = JSON.parse(data);\n      this.setState({\n        fetchData: jsonResponse\n      });\n    }.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    x.send();\n    return _this;\n  }\n\n  _createClass(HospitalChart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps, previousState) {\n      var lgaid = this.props.lga;\n      console.log(lgaid);\n      var jsonResponse;\n      var x = new XMLHttpRequest();\n      x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=hoslist');\n\n      x.onload = x.onerror = function () {\n        var data = x.responseText;\n        jsonResponse = JSON.parse(data);\n\n        if (previousProps.lga !== this.props.lga) {\n          this.setState({\n            fetchData: jsonResponse\n          });\n        }\n      }.bind(this);\n\n      x.send();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var resultData = this.state.fetchData;\n      var content = [];\n\n      if (resultData != null) {\n        console.log(resultData);\n        var hospitals = resultData.name;\n        console.log(hospitals);\n        console.log(hospitals.length);\n\n        for (var i = 0; i < hospitals.length; i++) {\n          content.push(React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, hospitals[i]));\n        }\n      } else {\n        content = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"No data for hospitals in this region\");\n      }\n\n      var list = React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" \", content, \" \");\n      return React.createElement(\"div\", {\n        className: \"hospitalChart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, list);\n    }\n  }]);\n\n  return HospitalChart;\n}(React.Component);\n\nexport { HospitalChart as default };","map":{"version":3,"sources":["C:\\Users\\MMV\\Desktop\\Final_System\\src\\components\\Map\\charts\\HospitalChart.js"],"names":["React","Chart","Spinner","HospitalChart","props","state","currentLGA","lga","fetchData","lgaid","console","log","jsonResponse","x","XMLHttpRequest","open","onload","onerror","data","responseText","JSON","parse","setState","bind","send","previousProps","previousState","resultData","content","hospitals","name","length","i","push","list","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Chart from 'react-google-charts';\r\nimport {Spinner} from 'react-bootstrap'\r\n\r\n\r\nexport default class HospitalChart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentLGA: this.props.lga,\r\n            fetchData: null\r\n        }\r\n        const lgaid = this.props.lga\r\n        console.log(lgaid)\r\n        var jsonResponse\r\n        var x = new XMLHttpRequest();\r\n        x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=hoslist');\r\n        x.onload = x.onerror = function () {\r\n            var data = x.responseText;\r\n            jsonResponse = JSON.parse(data);\r\n                this.setState({\r\n                    fetchData: jsonResponse\r\n                })\r\n            \r\n        }.bind(this);\r\n        x.send();\r\n\r\n\r\n\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        const lgaid = this.props.lga\r\n        console.log(lgaid)\r\n        var jsonResponse\r\n        var x = new XMLHttpRequest();\r\n        x.open('GET','https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=hoslist');\r\n        x.onload = x.onerror = function () {\r\n            var data = x.responseText;\r\n            jsonResponse = JSON.parse(data);\r\n            if (previousProps.lga !== this.props.lga) {\r\n                this.setState({\r\n                    fetchData: jsonResponse\r\n                })\r\n            }\r\n        }.bind(this);\r\n        x.send();\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const resultData = this.state.fetchData\r\n        \r\n        let content = []\r\n\r\n        if (resultData != null) {\r\n            console.log(resultData)\r\n            let hospitals = resultData.name\r\n            console.log(hospitals)\r\n            console.log(hospitals.length)\r\n            for (var i = 0;i < hospitals.length;i++){\r\n                content.push(<li>{hospitals[i]}</li>)\r\n            }           \r\n    }\r\n        else{\r\n            content = <p>No data for hospitals in this region</p>\r\n        }\r\n\r\n        let list = <ul> {content} </ul>\r\n        \r\n        return (\r\n<div className = \"hospitalChart\" >\r\n                {list}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}