{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\src\\\\components\\\\Compare\\\\JobChart.js\";\nimport React from 'react';\nimport Chart from 'react-google-charts';\nimport { Spinner } from 'react-bootstrap';\n\nvar JobChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(JobChart, _React$Component);\n\n  function JobChart(props) {\n    var _this;\n\n    _classCallCheck(this, JobChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JobChart).call(this, props));\n    _this.state = {\n      currentLGA: _this.props.lga\n    };\n    var lgaid = _this.props.lga;\n    console.log(lgaid);\n    var jsonResponse;\n    var x = new XMLHttpRequest();\n    x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=top5job');\n\n    x.onload = x.onerror = function () {\n      console.log(x.responseText);\n      var data = x.responseText;\n      jsonResponse = JSON.parse(data);\n      console.log(jsonResponse);\n      this.setState({\n        fetchData: jsonResponse\n      });\n    }.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    x.send();\n    return _this;\n  }\n\n  _createClass(JobChart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps, previousState) {\n      var lgaid = this.props.lga;\n      console.log(lgaid);\n      var jsonResponse;\n      var x = new XMLHttpRequest();\n      x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=top5job');\n\n      x.onload = x.onerror = function () {\n        console.log(x.responseText);\n        var data = x.responseText;\n        jsonResponse = JSON.parse(data);\n        console.log(jsonResponse);\n\n        if (previousProps.lga !== this.props.lga) {\n          this.setState({\n            fetchData: jsonResponse\n          });\n        }\n      }.bind(this);\n\n      x.send();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var resultData = this.state.fetchData;\n      var dataSet = [['Job Industry', 'Number of Jobs']];\n      var content = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n\n      if (resultData != null) {\n        for (var i = 0; i < resultData.jobIndustry.length; i++) {\n          var jobIndustry = resultData.jobIndustry[i].toString();\n          var numberOfJobs = resultData.numberOfJobs[i];\n          dataSet.push([jobIndustry, numberOfJobs]);\n        }\n\n        console.log(resultData);\n        content = React.createElement(Chart, {\n          height: 600,\n          chartType: \"ColumnChart\",\n          loader: React.createElement(Spinner, {\n            animation: \"border\",\n            variant: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }),\n          data: dataSet,\n          options: {\n            // Material design options\n            chart: {\n              title: 'Job Industry'\n            }\n          } // For tests\n          ,\n          rootProps: {\n            'data-testid': '2'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"jobChartSearch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return JobChart;\n}(React.Component);\n\nexport { JobChart as default };","map":{"version":3,"sources":["C:\\Users\\MMV\\Desktop\\Final_System\\src\\components\\Compare\\JobChart.js"],"names":["React","Chart","Spinner","JobChart","props","state","currentLGA","lga","lgaid","console","log","jsonResponse","x","XMLHttpRequest","open","onload","onerror","responseText","data","JSON","parse","setState","fetchData","bind","send","previousProps","previousState","resultData","dataSet","content","i","jobIndustry","length","toString","numberOfJobs","push","chart","title","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Chart from 'react-google-charts';\r\nimport {Spinner} from 'react-bootstrap'\r\n\r\n\r\nexport default class JobChart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentLGA: this.props.lga\r\n        }\r\n        const lgaid = this.props.lga\r\n        console.log(lgaid)\r\n        var jsonResponse\r\n        var x = new XMLHttpRequest();\r\n        x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid='+ lgaid + '&fac=top5job');\r\n        x.onload = x.onerror = function () {\r\n            console.log(x.responseText)\r\n            var data = x.responseText;\r\n            jsonResponse = JSON.parse(data);\r\n            console.log(jsonResponse);\r\n                this.setState({\r\n                    fetchData: jsonResponse\r\n                })\r\n            \r\n        }.bind(this);\r\n        x.send();\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        const lgaid = this.props.lga\r\n        console.log(lgaid)\r\n        var jsonResponse\r\n        var x = new XMLHttpRequest();\r\n        x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=top5job');\r\n        x.onload = x.onerror = function () {\r\n            console.log(x.responseText)\r\n            var data = x.responseText;\r\n            jsonResponse = JSON.parse(data);\r\n            console.log(jsonResponse);\r\n            if (previousProps.lga !== this.props.lga) {\r\n                this.setState({\r\n                    fetchData: jsonResponse\r\n                })\r\n            }\r\n        }.bind(this);\r\n        x.send();\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const resultData = this.state.fetchData\r\n        let dataSet = [['Job Industry', 'Number of Jobs']]\r\n        let content = <p></p>\r\n        if (resultData != null) {\r\n\r\n            for (var i = 0; i < resultData.jobIndustry.length; i++) {\r\n                let jobIndustry = resultData.jobIndustry[i].toString()\r\n                let numberOfJobs = resultData.numberOfJobs[i]\r\n                dataSet.push([jobIndustry, numberOfJobs])\r\n            }\r\n            console.log(resultData)\r\n            content = <Chart\r\n            height={600}\r\n\r\n                chartType=\"ColumnChart\"\r\n                loader={<Spinner animation=\"border\" variant=\"primary\" />}\r\n                data={dataSet}\r\n                options={{\r\n                    // Material design options\r\n                    chart: {\r\n                        title: 'Job Industry',\r\n                    },\r\n                }}\r\n                // For tests\r\n                rootProps={{ 'data-testid': '2' }}\r\n            />\r\n        }\r\n        \r\n        return (\r\n\r\n            <div className = \"jobChartSearch\" >{content}</div>\r\n        )\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}