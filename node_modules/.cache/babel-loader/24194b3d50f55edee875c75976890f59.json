{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\MMV\\\\Desktop\\\\Final_System\\\\src\\\\components\\\\Map\\\\charts\\\\PopulationChart.js\";\nimport React from 'react';\nimport Chart from 'react-google-charts';\nimport { Spinner } from 'react-bootstrap';\n\nvar PopulationChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PopulationChart, _React$Component);\n\n  function PopulationChart(props) {\n    var _this;\n\n    _classCallCheck(this, PopulationChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PopulationChart).call(this, props));\n    _this.state = {\n      currentLGA: _this.props.lga,\n      fetchData: null\n    };\n    var lgaid = _this.props.lga;\n    console.log(lgaid);\n    var jsonResponse;\n    var x = new XMLHttpRequest();\n    x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=pop');\n\n    x.onload = x.onerror = function () {\n      console.log(x.responseText);\n      var data = x.responseText;\n      jsonResponse = JSON.parse(data);\n      console.log(jsonResponse);\n      this.setState({\n        fetchData: jsonResponse\n      });\n    }.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    x.send();\n    return _this;\n  }\n\n  _createClass(PopulationChart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps, previousState) {\n      var lgaid = this.props.lga;\n      console.log(lgaid);\n      var jsonResponse;\n      var x = new XMLHttpRequest();\n      x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=pop');\n\n      x.onload = x.onerror = function () {\n        console.log(x.responseText);\n        var data = x.responseText;\n        jsonResponse = JSON.parse(data);\n        console.log(jsonResponse);\n\n        if (previousProps.lga !== this.props.lga || previousProps.charttype !== this.props.chartType) {\n          this.setState({\n            fetchData: jsonResponse\n          });\n        }\n      }.bind(this);\n\n      x.send();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var resultData = this.state.fetchData;\n      var content = null;\n      var dataSet = [['Native culture', 'Population']];\n\n      if (resultData != null) {\n        for (var i = 0; i < resultData.nationality.length; i++) {\n          var nationality = resultData.nationality[i].toString();\n          var population = resultData.population[i];\n          dataSet.push([nationality, population]);\n        }\n\n        console.log(resultData);\n        content = React.createElement(Chart, {\n          height: 600,\n          chartType: \"PieChart\",\n          loader: React.createElement(Spinner, {\n            animation: \"border\",\n            variant: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }),\n          data: dataSet,\n          options: {\n            title: 'Top 5 cultures in this Region',\n            is3D: true\n          },\n          rootProps: {\n            'data-testid': '5'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      } else {\n        content = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"populationChart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return PopulationChart;\n}(React.Component);\n\nexport { PopulationChart as default };","map":{"version":3,"sources":["C:\\Users\\MMV\\Desktop\\Final_System\\src\\components\\Map\\charts\\PopulationChart.js"],"names":["React","Chart","Spinner","PopulationChart","props","state","currentLGA","lga","fetchData","lgaid","console","log","jsonResponse","x","XMLHttpRequest","open","onload","onerror","responseText","data","JSON","parse","setState","bind","send","previousProps","previousState","charttype","chartType","resultData","content","dataSet","i","nationality","length","toString","population","push","title","is3D","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;;IAEqBC,e;;;;;AACjB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,yFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,MAAKF,KAAL,CAAWG,GADd;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIA,QAAMC,KAAK,GAAG,MAAKL,KAAL,CAAWG,GAAzB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAIG,YAAJ;AACA,QAAIC,CAAC,GAAG,IAAIC,cAAJ,EAAR;AACAD,IAAAA,CAAC,CAACE,IAAF,CAAO,KAAP,EAAc,oDAAoDN,KAApD,GAA4D,UAA1E;;AACAI,IAAAA,CAAC,CAACG,MAAF,GAAWH,CAAC,CAACI,OAAF,GAAY,YAAY;AAC/BP,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACK,YAAd;AACA,UAAIC,IAAI,GAAGN,CAAC,CAACK,YAAb;AACAN,MAAAA,YAAY,GAAGQ,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAf;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACI,WAAKU,QAAL,CAAc;AACVd,QAAAA,SAAS,EAAEI;AADD,OAAd;AAIP,KATsB,CASrBW,IATqB,uDAAvB;;AAUAV,IAAAA,CAAC,CAACW,IAAF;AArBe;AAyBlB;;;;uCAEkBC,a,EAAeC,a,EAAe;AAC7C,UAAMjB,KAAK,GAAG,KAAKL,KAAL,CAAWG,GAAzB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAIG,YAAJ;AACA,UAAIC,CAAC,GAAG,IAAIC,cAAJ,EAAR;AACAD,MAAAA,CAAC,CAACE,IAAF,CAAO,KAAP,EAAc,oDAAmDN,KAAnD,GAA2D,UAAzE;;AACAI,MAAAA,CAAC,CAACG,MAAF,GAAWH,CAAC,CAACI,OAAF,GAAY,YAAY;AAC/BP,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACK,YAAd;AACA,YAAIC,IAAI,GAAGN,CAAC,CAACK,YAAb;AACAN,QAAAA,YAAY,GAAGQ,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAf;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;;AACA,YAAIa,aAAa,CAAClB,GAAd,KAAsB,KAAKH,KAAL,CAAWG,GAAjC,IAAwCkB,aAAa,CAACE,SAAd,KAA4B,KAAKvB,KAAL,CAAWwB,SAAnF,EAA8F;AAC1F,eAAKN,QAAL,CAAc;AACVd,YAAAA,SAAS,EAAEI;AADD,WAAd;AAGH;AACJ,OAVsB,CAUrBW,IAVqB,CAUhB,IAVgB,CAAvB;;AAWAV,MAAAA,CAAC,CAACW,IAAF;AAEH;;;6BACQ;AACL,UAAMK,UAAU,GAAG,KAAKxB,KAAL,CAAWG,SAA9B;AACA,UAAIsB,OAAO,GAAG,IAAd;AACA,UAAIC,OAAO,GAAG,CAAC,CAAC,gBAAD,EAAmB,YAAnB,CAAD,CAAd;;AACA,UAAIF,UAAU,IAAI,IAAlB,EAAwB;AAEpB,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,WAAX,CAAuBC,MAA3C,EAAmDF,CAAC,EAApD,EAAwD;AACpD,cAAIC,WAAW,GAAGJ,UAAU,CAACI,WAAX,CAAuBD,CAAvB,EAA0BG,QAA1B,EAAlB;AACA,cAAIC,UAAU,GAAGP,UAAU,CAACO,UAAX,CAAsBJ,CAAtB,CAAjB;AACAD,UAAAA,OAAO,CAACM,IAAR,CAAa,CAACJ,WAAD,EAAcG,UAAd,CAAb;AACH;;AACD1B,QAAAA,OAAO,CAACC,GAAR,CAAYkB,UAAZ;AACAC,QAAAA,OAAO,GAEH,oBAAC,KAAD;AACI,UAAA,MAAM,EAAE,GADZ;AAEI,UAAA,SAAS,EAAC,UAFd;AAGI,UAAA,MAAM,EAAE,oBAAC,OAAD;AAAS,YAAA,SAAS,EAAC,QAAnB;AAA4B,YAAA,OAAO,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHZ;AAII,UAAA,IAAI,EAAEC,OAJV;AAKI,UAAA,OAAO,EAAE;AACLO,YAAAA,KAAK,EAAE,+BADF;AAELC,YAAAA,IAAI,EAAE;AAFD,WALb;AASI,UAAA,SAAS,EAAE;AAAE,2BAAe;AAAjB,WATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAcH,OAtBD,MA4BK;AACDT,QAAAA,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAV;AAEH;;AACD,aACI;AAAK,QAAA,SAAS,EAAG,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCA,OADD,CADJ;AAMH;;;;EA1FwC9B,KAAK,CAACwC,S;;SAA9BrC,e","sourcesContent":["import React from 'react'\r\nimport Chart from 'react-google-charts';\r\nimport {Spinner} from 'react-bootstrap'\r\n\r\nexport default class PopulationChart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentLGA: this.props.lga,\r\n            fetchData: null\r\n        }\r\n        const lgaid = this.props.lga\r\n        console.log(lgaid)\r\n        var jsonResponse\r\n        var x = new XMLHttpRequest();\r\n        x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid=' + lgaid + '&fac=pop');\r\n        x.onload = x.onerror = function () {\r\n            console.log(x.responseText)\r\n            var data = x.responseText;\r\n            jsonResponse = JSON.parse(data);\r\n            console.log(jsonResponse);\r\n                this.setState({\r\n                    fetchData: jsonResponse\r\n                })\r\n            \r\n        }.bind(this);\r\n        x.send();\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps, previousState) {\r\n        const lgaid = this.props.lga\r\n        console.log(lgaid)\r\n        var jsonResponse\r\n        var x = new XMLHttpRequest();\r\n        x.open('GET', 'https://scin-dev-test.appspot.com/dataserv?rid='+ lgaid + '&fac=pop');\r\n        x.onload = x.onerror = function () {\r\n            console.log(x.responseText)\r\n            var data = x.responseText;\r\n            jsonResponse = JSON.parse(data);\r\n            console.log(jsonResponse);\r\n            if (previousProps.lga !== this.props.lga || previousProps.charttype !== this.props.chartType) {\r\n                this.setState({\r\n                    fetchData: jsonResponse\r\n                })\r\n            }\r\n        }.bind(this);\r\n        x.send();\r\n\r\n    }\r\n    render() {\r\n        const resultData = this.state.fetchData\r\n        let content = null\r\n        let dataSet = [['Native culture', 'Population']]\r\n        if (resultData != null) {\r\n\r\n            for (var i = 0; i < resultData.nationality.length; i++) {\r\n                let nationality = resultData.nationality[i].toString()\r\n                let population = resultData.population[i]\r\n                dataSet.push([nationality, population])\r\n            }\r\n            console.log(resultData)\r\n            content = (\r\n\r\n                <Chart\r\n                    height={600}\r\n                    chartType=\"PieChart\"\r\n                    loader={<Spinner animation=\"border\" variant=\"primary\" />}\r\n                    data={dataSet}\r\n                    options={{\r\n                        title: 'Top 5 cultures in this Region',\r\n                        is3D: true,\r\n                    }}\r\n                    rootProps={{ 'data-testid': '5' }}\r\n                />\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        else {\r\n            content = <p></p>\r\n\r\n        }\r\n        return (\r\n            <div className = \"populationChart\" >\r\n            {content}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}